{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":"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","sourcesContent":["import bodyParser from 'body-parser';\nimport cors from 'cors';\nimport crypto from 'crypto';\nimport express from 'express';\nimport fs from 'fs';\nimport glob from 'glob';\nimport http from 'http';\nimport path from 'path';\nimport sane from 'sane';\nimport ws from 'ws';\n\nimport { storiesFileDir } from './constants';\nimport { getConfig } from './getConfig';\nimport { IServerConfig, IStoryManifestItem } from './types';\nimport { writeRequiredFiles } from './writeRequiredFiles';\n\n// TODO - figure out the best way to generate a pure id from filepath\n//  needs to be a string with valid JS characters\nfunction createId(data: string) {\n  let id = crypto\n    .createHash('sha256')\n    .update(data)\n    .digest('base64');\n\n  id = id.replace(/[^a-zA-Z_]/gi, '');\n\n  return id;\n}\n\nfunction startServer(serverConfig: IServerConfig) {\n  const config = getConfig(serverConfig);\n\n  const { projectRoot, port, watchRoot } = config;\n\n  writeRequiredFiles(config);\n\n  const manifestFilePath = path.resolve(projectRoot, storiesFileDir, 'storyManifest.json');\n  const storyManifest = require(manifestFilePath);\n  const storiesById = {};\n\n  const results = glob.sync('**/*.stories.{tsx,ts,js,jsx}', {\n    cwd: watchRoot,\n    ignore: ['**/node_modules/**', '**/ios/**', '**/android/**'],\n  });\n\n  results.forEach(relPath => {\n    saveStoryAtPath(relPath);\n  });\n\n  const watcher = sane(projectRoot, {\n    glob: ['**/*.stories.tsx', '**/*.stories.js', '**/*.stories.ts', '**/*.stories.jsx'],\n    ignored: ['node_modules'],\n    watchman: true,\n  });\n\n  watcher.on('change', relPath => {\n    saveStoryAtPath(relPath);\n  });\n\n  watcher.on('add', relPath => {\n    saveStoryAtPath(relPath);\n  });\n\n  watcher.on('delete', function(relPath) {\n    const fullPath = path.resolve(watchRoot, relPath);\n    const id = createId(fullPath);\n\n    delete storyManifest.files[id];\n    const storyManifestAsString = JSON.stringify(storyManifest, null, '\\t');\n\n    fs.writeFileSync(manifestFilePath, storyManifestAsString, {\n      encoding: 'utf-8',\n    });\n\n    writeStoriesFile();\n  });\n\n  watcher.on('ready', () => {\n    console.log('ready');\n    startApp();\n  });\n\n  const app = express();\n  app.use(bodyParser.json());\n  app.use(cors());\n  const server = http.createServer(app);\n  const wss = new ws.Server({ server });\n\n  function getStories() {\n    const stories = Object.keys(storyManifest.files).map(key => {\n      return storyManifest.files[key];\n    });\n\n    return stories;\n  }\n\n  app.get('/stories', (req, res) => {\n    const stories = getStories();\n    res.json({ data: stories });\n  });\n\n  app.post(`/stories`, (req, res) => {\n    const { type, payload } = req.body;\n\n    if (type === 'selectStory') {\n      const storyId: string = payload;\n      const selectedStory = storiesById[storyId];\n\n      if (selectedStory) {\n        wss.clients.forEach(client => {\n          if (client.readyState === ws.OPEN) {\n            // TODO\n          }\n        });\n\n        res.json({ data: selectedStory });\n        return;\n      }\n    }\n\n    if (type === 'clearStory') {\n      wss.clients.forEach(client => {\n        if (client.readyState === ws.OPEN) {\n          const event = {\n            type: 'clearStory',\n          };\n\n          client.send(JSON.stringify(event));\n        }\n      });\n\n      res.json({ data: 'Cleared story' });\n      return;\n    }\n\n    res.json({ data: 'Invalid story id provided!' });\n  });\n\n  function startApp() {\n    server.listen(port, () => {\n      console.log(`Listening on http://localhost:${port}`);\n    });\n  }\n\n  function saveStoryAtPath(relPath: string) {\n    const fullPath = path.resolve(watchRoot, relPath);\n    const fileAsString = fs.readFileSync(fullPath, { encoding: 'utf-8' });\n    const storyManifest = getStoryManifest(config);\n\n    const id = createId(fullPath);\n    const acorn = require('acorn-loose');\n\n    const parsed = acorn.parse(fileAsString, {\n      ecmaVersion: 2020,\n      sourceType: 'module',\n    });\n\n    const title = relPath\n      .split('/')\n      .pop()\n      ?.replace('.stories.tsx', '');\n\n    const storyData: Pick<IStoryManifestItem, 'title' | 'stories'> = {\n      title: title || '',\n      stories: [],\n    };\n\n    parsed.body.forEach(node => {\n      if (node.type === 'ExportNamedDeclaration') {\n        if (node.declaration !== null) {\n          const { type } = node.declaration;\n          if (type === 'VariableDeclaration') {\n            node.declaration.declarations.forEach(d => {\n              const name = d.id.name;\n              storyData.stories.push({\n                name,\n                key: name,\n                id: `${id}_${name}`,\n              });\n            });\n          }\n\n          if (type === 'FunctionDeclaration') {\n            const name = node.declaration.id.name;\n            storyData.stories.push({\n              name,\n              key: name,\n              id: `${id}_${name}`,\n            });\n          }\n        }\n\n        if (node.specifiers.length > 0) {\n          node.specifiers.forEach(specifier => {\n            const name = specifier.exported.name;\n            if (!storyData.stories.includes(name)) {\n              storyData.stories.push({\n                name,\n                key: name,\n                id: `${id}_${name}`,\n              });\n            }\n          });\n        }\n      }\n    });\n\n    const defaultExport = parsed.body.find(node => node.type === 'ExportDefaultDeclaration');\n\n    if (defaultExport) {\n      defaultExport.declaration.properties.forEach(property => {\n        const key = property.key.name;\n        const value = property.value.value;\n\n        storyData[key] = value;\n      });\n    }\n\n    let cachedFile = storyManifest.files[id];\n\n    if (!cachedFile) {\n      storyManifest.files[id] = {\n        id,\n        fullPath,\n        relativePath: relPath,\n      };\n\n      cachedFile = storyManifest.files[id];\n    }\n\n    cachedFile.title = storyData.title;\n    cachedFile.stories = storyData.stories;\n\n    const storyManifestAsString = JSON.stringify(storyManifest, null, '\\t');\n\n    fs.writeFileSync(manifestFilePath, storyManifestAsString, {\n      encoding: 'utf-8',\n    });\n\n    writeStoriesFile();\n  }\n\n  function writeStoriesFile() {\n    const stories = getStories();\n\n    function captureAndWriteStoryRequires() {\n      return stories\n        .map(story => {\n          storiesById[story.id] = story;\n          const componentKey = story.id;\n\n          return `\n            const ${componentKey} = require(\"${story.fullPath}\")\n        \n            Object.keys(${componentKey}).forEach((key) => {\n              const Component = ${componentKey}[key]\n              \n              if (typeof Component === \"function\") {\n                const storyId = \"${componentKey}\" + \"_\" + key\n                stories[storyId] = Component\n              }\n            })\n          `;\n        })\n        .join('\\n');\n    }\n\n    const template = `\n      const stories = {}\n      ${captureAndWriteStoryRequires()}\n      module.exports = stories\n    `;\n\n    const storiesDir = path.resolve(projectRoot, storiesFileDir);\n    const writeRequiresPath = path.resolve(storiesDir, 'stories.js');\n    fs.writeFileSync(writeRequiresPath, template, { encoding: 'utf-8' });\n  }\n}\n\nfunction getStoryManifest(config: IServerConfig) {\n  const manifestFilePath = path.resolve(config.projectRoot, storiesFileDir, 'storyManifest.json');\n  const storyManifest = require(manifestFilePath);\n  return storyManifest;\n}\n\nexport { startServer };\n"]}