{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/async-stack/types.ts"],"names":[],"mappings":"","sourcesContent":["export type IStackEvent =\n  | \"pushstart\"\n  | \"pushend\"\n  | \"popstart\"\n  | \"popend\"\n  | \"replace\"\n  | \"itemupdate\";\n\nexport type IStatus = \"pushing\" | \"popping\" | \"settled\";\n\nexport type ListenerFn<T> = ({\n  items,\n}: {\n  action: IStackEvent;\n  key: string;\n  items: IItem<T>[];\n  getItemByKey: (key: string) => T | undefined;\n}) => void;\n\nexport type IItem<T> = T & { key: string; status: IStatus };\nexport type IReplaceOptions<T> = T & { replaceAmount?: number; key?: string };\nexport type IPushOptions<T> = T & { key?: string };\nexport interface IStack<T> {\n  push: (pushOptions: IPushOptions<T>) => Promise<string>;\n  pop: (amount?: number) => Promise<string[]>;\n  replace: (replaceOptions: IReplaceOptions<T>) => Promise<any>;\n  onPushEnd: (key: string) => void;\n  onPopEnd: (key: string) => void;\n  subscribe: (listener: ListenerFn<T>) => () => void;\n  getState: () => {\n    items: IItem<T>[];\n    getItemByKey: (key: string) => T | undefined;\n  };\n  update: (index: number, updates: T) => void;\n}\n"]}