{"version":3,"file":"stack.js","sourceRoot":"","sources":["../../src/async-stack/stack.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, Platform, StyleSheet, View, ViewProps } from 'react-native';\nimport {\n  ScreenStack as NativeScreenStack,\n  Screen as NativeStackScreen,\n  ScreenStackHeaderConfig,\n  ScreenProps,\n  ScreenStackHeaderConfigProps,\n} from 'react-native-screens';\n\nimport { createAsyncStack, useStackItems } from './createAsyncStack';\nimport { IStack } from './types';\n\nexport interface IScreen {\n  meta?: any;\n  element?: React.ReactElement<any>;\n  screenProps?: ScreenProps;\n  headerProps?: ScreenStackHeaderConfigProps;\n  href?: string;\n}\n\ninterface IStackProps {\n  stack: IStack<IScreen>;\n  children?: React.ReactNode;\n}\n\nfunction WebStack({ stack, children }: IStackProps) {\n  const screens = useStackItems(stack);\n\n  return (\n    <WebScreenStack style={{ ...StyleSheet.absoluteFillObject, overflow: 'hidden' }}>\n      {children}\n      {screens.map(screen => {\n        return (\n          <WebScreen\n            key={screen.key}\n            status={screen.status}\n            onPushEnd={() => stack.onPushEnd(screen.key)}\n            onPopEnd={() => stack.onPopEnd(screen.key)}>\n            {screen.element}\n          </WebScreen>\n        );\n      })}\n    </WebScreenStack>\n  );\n}\n\nfunction WebScreenStack(props: any) {\n  return <View {...props} />;\n}\n\ninterface IWebScreen extends ViewProps {\n  onPushEnd: () => void;\n  onPopEnd: () => void;\n  status: string;\n  children: React.ReactNode;\n}\n\nfunction WebScreen({ children, onPushEnd, onPopEnd, status }: IWebScreen) {\n  const animatedValue = React.useRef(new Animated.Value(status === 'settled' ? 1 : 0));\n\n  React.useEffect(() => {\n    if (status === 'pushing') {\n      Animated.spring(animatedValue.current, {\n        toValue: 1,\n        useNativeDriver: true,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n      }).start(onPushEnd);\n    }\n\n    if (status === 'popping') {\n      Animated.spring(animatedValue.current, {\n        toValue: 0,\n        useNativeDriver: true,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n      }).start(onPopEnd);\n    }\n  }, [status]);\n\n  const translateX = animatedValue.current.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['100%', '0%'],\n  });\n\n  return (\n    <Animated.View\n      pointerEvents={status === 'popping' ? 'none' : 'auto'}\n      style={[StyleSheet.absoluteFill, { transform: [{ translateX }] }]}>\n      {children}\n    </Animated.View>\n  );\n}\n\nfunction NativeStack({ stack, children }: IStackProps) {\n  const screens = useStackItems(stack);\n\n  return (\n    <NativeScreenStack style={StyleSheet.absoluteFill}>\n      <NativeScreen status=\"settled\">{children}</NativeScreen>\n      {screens.map((screen, i) => {\n        return (\n          <NativeScreen\n            index={i}\n            key={screen.key}\n            status={screen.status}\n            onPushEnd={() => stack.onPushEnd(screen.key)}\n            onPopEnd={() => stack.onPopEnd(screen.key)}\n            {...(screen.screenProps || {})}>\n            <ScreenStackHeaderConfig hidden={!screen.headerProps} {...screen.headerProps} />\n\n            {screen.element || null}\n          </NativeScreen>\n        );\n      })}\n    </NativeScreenStack>\n  );\n}\n\nfunction NativeScreen({ index, status, onPushEnd, onPopEnd, children, ...props }: any) {\n  React.useEffect(() => {\n    if (status === 'pushing') {\n      onPushEnd();\n    }\n\n    if (status === 'popping') {\n      onPopEnd();\n    }\n  }, [status, onPushEnd, onPopEnd]);\n\n  return (\n    <NativeStackScreen\n      active={1}\n      activityState={2}\n      style={StyleSheet.absoluteFill}\n      onDismissed={onPopEnd}\n      gestureEnabled={index !== 0}\n      {...props}>\n      {children}\n    </NativeStackScreen>\n  );\n}\n\nconst Stack = Platform.select({\n  native: NativeStack,\n  web: WebStack,\n  default: WebStack,\n});\n\nWebStack.createStack = () => createAsyncStack<IScreen>();\nNativeStack.createStack = () => createAsyncStack<IScreen>();\n\nexport { Stack };\n"]}