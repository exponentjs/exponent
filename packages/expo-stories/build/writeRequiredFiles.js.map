{"version":3,"file":"writeRequiredFiles.js","sourceRoot":"","sources":["../src/writeRequiredFiles.ts"],"names":[],"mappings":";;;;;;AAAA,0CAAoB;AACpB,8CAAwB;AAExB,yCAA6C;AAC7C,yCAAwC;AAGxC,SAAS,kBAAkB,CAAC,YAA2B;IACrD,IAAM,MAAM,GAAG,qBAAS,CAAC,YAAY,CAAC,CAAC;IAE/B,IAAA,WAAW,GAAsB,MAAM,YAA5B,EAAE,SAAS,GAAW,MAAM,UAAjB,EAAE,IAAI,GAAK,MAAM,KAAX,CAAY;IAEhD,IAAM,aAAa,GAAG,cAAI,CAAC,OAAO,CAAC,WAAW,EAAE,0BAAc,CAAC,CAAC;IAEhE,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;QACjC,YAAE,CAAC,SAAS,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;KAClD;IAED,IAAM,eAAe,GAAG,cAAI,CAAC,OAAO,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;IAElE,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;QACnC,YAAE,CAAC,aAAa,CAAC,eAAe,EAAE,qBAAqB,EAAE;YACvD,QAAQ,EAAE,OAAO;SAClB,CAAC,CAAC;KACJ;IAED,IAAM,mBAAmB,GAAG,cAAI,CAAC,OAAO,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;IAE9E,IAAI,YAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE;QACtC,IAAM,aAAa,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAEnD,IAAI,aAAa,CAAC,SAAS,KAAK,SAAS,IAAI,aAAa,CAAC,WAAW,KAAK,WAAW,EAAE;YACtF,YAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;SACpC;KACF;IAED,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE;QACvC,IAAM,aAAa,GAAG;YACpB,SAAS,WAAA;YACT,IAAI,MAAA;YACJ,WAAW,aAAA;YACX,KAAK,EAAE,EAAE;SACV,CAAC;QAEF,IAAM,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAExE,OAAO,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAE1C,YAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,qBAAqB,EAAE;YAC3D,QAAQ,EAAE,OAAO;SAClB,CAAC,CAAC;KACJ;AACH,CAAC;AAEQ,gDAAkB","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { storiesFileDir } from './constants';\nimport { getConfig } from './getConfig';\nimport { IServerConfig } from './types';\n\nfunction writeRequiredFiles(serverConfig: IServerConfig) {\n  const config = getConfig(serverConfig);\n\n  const { projectRoot, watchRoot, port } = config;\n\n  const pathToStories = path.resolve(projectRoot, storiesFileDir);\n\n  if (!fs.existsSync(pathToStories)) {\n    fs.mkdirSync(pathToStories, { recursive: true });\n  }\n\n  const pathToStoryFile = path.resolve(pathToStories, 'stories.js');\n\n  if (!fs.existsSync(pathToStoryFile)) {\n    fs.writeFileSync(pathToStoryFile, 'module.exports = {}', {\n      encoding: 'utf-8',\n    });\n  }\n\n  const pathToStoryManifest = path.resolve(pathToStories, 'storyManifest.json');\n\n  if (fs.existsSync(pathToStoryManifest)) {\n    const storyManifest = require(pathToStoryManifest);\n\n    if (storyManifest.watchRoot !== watchRoot || storyManifest.projectRoot !== projectRoot) {\n      fs.unlinkSync(pathToStoryManifest);\n    }\n  }\n\n  if (!fs.existsSync(pathToStoryManifest)) {\n    const emptyManifest = {\n      watchRoot,\n      port,\n      projectRoot,\n      files: {},\n    };\n\n    const emptyManifestAsString = JSON.stringify(emptyManifest, null, '\\t');\n\n    delete require.cache[pathToStoryManifest];\n\n    fs.writeFileSync(pathToStoryManifest, emptyManifestAsString, {\n      encoding: 'utf-8',\n    });\n  }\n}\n\nexport { writeRequiredFiles };\n"]}